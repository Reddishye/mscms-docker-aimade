services:
  # Database - needs to be available first
  database:
    image: mariadb:10.11
    container_name: minestore-db
    restart: unless-stopped
    environment:
      - MYSQL_ROOT_PASSWORD=${DB_ROOT_PASSWORD}
      - MYSQL_DATABASE=${DB_DATABASE:-minestore}
      - MYSQL_USER=${DB_USERNAME:-minestore_user}
      - MYSQL_PASSWORD=${DB_PASSWORD}
      - TZ=${TIMEZONE:-UTC}
    volumes:
      - database_data:/var/lib/mysql
    networks:
      - minestore_network
    command: [
      '--default-authentication-plugin=mysql_native_password',
      '--character-set-server=utf8mb4',
      '--collation-server=utf8mb4_unicode_ci',
      '--default-time-zone=+00:00',
      '--innodb-buffer-pool-size=256M',
      '--max-connections=100'
    ]
    healthcheck:
      test: ["CMD", "healthcheck.sh", "--connect", "--innodb_initialized"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 30s
    logging:
      driver: "json-file"
      options:
        max-size: "20m"
        max-file: "3"

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: minestore-redis
    restart: unless-stopped
    command: >
      redis-server 
      --appendonly yes 
      --appendfsync everysec
      --save 900 1
      --save 300 10
      --save 60 10000
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
      ${REDIS_PASSWORD:+--requirepass "$REDIS_PASSWORD"}
    volumes:
      - redis_data:/data
    networks:
      - minestore_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Application Installer - runs once to set up the app
  app-installer:
    build: 
      context: .
      dockerfile: Dockerfile
      target: minestore-installer
    container_name: minestore-installer
    restart: "no"
    depends_on:
      database:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - minestore_app:/var/www/minestore
    environment:
      # Required variables
      - APP_URL=${APP_URL}
      - LICENSE_KEY=${LICENSE_KEY}
      
      # Database variables
      - DB_CONNECTION=mysql
      - DB_HOST=database
      - DB_PORT=3306
      - DB_DATABASE=${DB_DATABASE:-minestore}
      - DB_USERNAME=${DB_USERNAME:-minestore_user}
      - DB_PASSWORD=${DB_PASSWORD}
      
      # Redis variables
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}
      
      # Optional variables with default values
      - APP_NAME=${APP_NAME:-MineStoreCMS}
      - APP_ENV=${APP_ENV:-production}
      - APP_DEBUG=${APP_DEBUG:-false}
      - APP_KEY=${APP_KEY:-}
      - TIMEZONE=${TIMEZONE:-UTC}
      - LOCALE=${LOCALE:-en}
      
      # MineStoreCMS configuration
      - PAYNOW_ENABLED=${PAYNOW_ENABLED:-}
      - PAYNOW_TAX_MODE=${PAYNOW_TAX_MODE:-}
      - PAYNOW_STORE_ID=${PAYNOW_STORE_ID:-}
      - PAYNOW_API_KEY=${PAYNOW_API_KEY:-}
      - STEAM_API_KEY=${STEAM_API_KEY:-}
    networks:
      - minestore_network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # PHP-FPM service
  php-fpm:
    build:
      context: .
      dockerfile: Dockerfile
      target: minestore-runtime
    container_name: minestore-php-fpm
    restart: unless-stopped
    depends_on:
      app-installer:
        condition: service_completed_successfully
      database:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - minestore_app:/var/www/minestore
    environment:
      - APP_URL=${APP_URL}
      - LICENSE_KEY=${LICENSE_KEY}
      - DB_CONNECTION=mysql
      - DB_HOST=database
      - DB_PORT=3306
      - DB_DATABASE=${DB_DATABASE:-minestore}
      - DB_USERNAME=${DB_USERNAME:-minestore_user}
      - DB_PASSWORD=${DB_PASSWORD}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}
      - APP_NAME=${APP_NAME:-MineStoreCMS}
      - APP_ENV=${APP_ENV:-production}
      - APP_DEBUG=${APP_DEBUG:-false}
      - APP_KEY=${APP_KEY:-}
      - TIMEZONE=${TIMEZONE:-UTC}
      - LOCALE=${LOCALE:-en}
      - PAYNOW_ENABLED=${PAYNOW_ENABLED:-}
      - PAYNOW_TAX_MODE=${PAYNOW_TAX_MODE:-}
      - PAYNOW_STORE_ID=${PAYNOW_STORE_ID:-}
      - PAYNOW_API_KEY=${PAYNOW_API_KEY:-}
      - STEAM_API_KEY=${STEAM_API_KEY:-}
    working_dir: /var/www/minestore
    networks:
      - minestore_network
    healthcheck:
      test: ["CMD-SHELL", "php-fpm-healthcheck || nc -z 127.0.0.1 9000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    logging:
      driver: "json-file"
      options:
        max-size: "20m"
        max-file: "5"

  # Next.js Frontend
  frontend:
    build:
      context: .
      dockerfile: Dockerfile
      target: minestore-frontend
    container_name: minestore-frontend
    restart: unless-stopped
    depends_on:
      app-installer:
        condition: service_completed_successfully
    volumes:
      - minestore_app:/var/www/minestore:ro
    environment:
      - NODE_ENV=production
      - PORT=3000
      - NEXT_PUBLIC_API_URL=${APP_URL}
    networks:
      - minestore_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health", "||", "nc", "-z", "127.0.0.1", "3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 120s
    logging:
      driver: "json-file"
      options:
        max-size: "20m"
        max-file: "3"

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: minestore-nginx
    restart: unless-stopped
    depends_on:
      php-fpm:
        condition: service_healthy
      frontend:
        condition: service_healthy
    ports:
      - "${NGINX_PORT:-80}:80"
    volumes:
      - minestore_app:/var/www/minestore:ro
      - ./config/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./config/nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
    networks:
      - minestore_network
    labels:
      # Manual Traefik configuration for Coolify
      - "traefik.enable=true"
      - "traefik.http.routers.minestore-${COMPOSE_PROJECT_NAME:-minestore}.rule=Host(`${DOMAIN}`)"
      - "traefik.http.routers.minestore-${COMPOSE_PROJECT_NAME:-minestore}.entrypoints=websecure"
      - "traefik.http.routers.minestore-${COMPOSE_PROJECT_NAME:-minestore}.tls.certresolver=letsencrypt"
      - "traefik.http.services.minestore-${COMPOSE_PROJECT_NAME:-minestore}.loadbalancer.server.port=80"
      - "traefik.docker.network=coolify"
      - "coolify.managed=true"
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health || nc -z 127.0.0.1 80"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "5"

  # Laravel Queue Workers
  queue-worker:
    build:
      context: .
      dockerfile: Dockerfile
      target: minestore-runtime
    container_name: minestore-queue-worker
    restart: unless-stopped
    depends_on:
      php-fpm:
        condition: service_healthy
    volumes:
      - minestore_app:/var/www/minestore
    environment:
      - APP_URL=${APP_URL}
      - LICENSE_KEY=${LICENSE_KEY}
      - DB_CONNECTION=mysql
      - DB_HOST=database
      - DB_PORT=3306
      - DB_DATABASE=${DB_DATABASE:-minestore}
      - DB_USERNAME=${DB_USERNAME:-minestore_user}
      - DB_PASSWORD=${DB_PASSWORD}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}
    working_dir: /var/www/minestore
    networks:
      - minestore_network
    command: >
      bash -c "
        echo 'Waiting for app installation to complete...'
        while [ ! -f /var/www/minestore/.installed ]; do
          sleep 5
        done
        
        cd /var/www/minestore
        exec php artisan queue:work --queue=high,standard,low,default,paynow --sleep=3 --tries=3 --max-time=3600 --memory=256
      "
    logging:
      driver: "json-file"
      options:
        max-size: "30m"
        max-file: "3"

  # Laravel Scheduler
  scheduler:
    build:
      context: .
      dockerfile: Dockerfile
      target: minestore-runtime
    container_name: minestore-scheduler
    restart: unless-stopped
    depends_on:
      php-fpm:
        condition: service_healthy
    volumes:
      - minestore_app:/var/www/minestore
    environment:
      - APP_URL=${APP_URL}
      - LICENSE_KEY=${LICENSE_KEY}
      - DB_CONNECTION=mysql
      - DB_HOST=database
      - DB_PORT=3306
      - DB_DATABASE=${DB_DATABASE:-minestore}
      - DB_USERNAME=${DB_USERNAME:-minestore_user}
      - DB_PASSWORD=${DB_PASSWORD}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}
    working_dir: /var/www/minestore
    networks:
      - minestore_network
    command: >
      bash -c "
        echo 'Waiting for app installation to complete...'
        while [ ! -f /var/www/minestore/.installed ]; do
          sleep 5
        done
        
        cd /var/www/minestore
        while true; do
          php artisan schedule:run --verbose --no-interaction
          sleep 60
        done
      "
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

volumes:
  minestore_app:
    driver: local
  database_data:
    driver: local
  redis_data:
    driver: local

networks:
  minestore_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
  # Connect to Coolify's Traefik network
  coolify:
    external: true
